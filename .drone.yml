---
kind: pipeline
name: amd64_clang_cmake

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..
    - make -j
    - ctest .  --output-on-failure
---
kind: pipeline
name: amd64_clang_cmake_sanitize

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS .. -DROARING_SANITIZE=ON
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest .  --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: gcc
    CXX: g++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..
    - make -j
    - ctest .  --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake_sanitize

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: gcc
    CXX: g++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..  -DROARING_SANITIZE=ON
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest .  --output-on-failure
---
kind: pipeline
name: arm64_clang_cmake

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..
    - make -j
    - ctest .  --output-on-failure
---
kind: pipeline
name: arm64_clang_cmake_sanitize

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..  -DROARING_SANITIZE=ON
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest .  --output-on-failure
---
kind: pipeline
name: arm64_gcc_cmake

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: gcc
    CXX: g++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..
    - make -j
    - ctest .  --output-on-failure
---
kind: pipeline
name: arm64_gcc_cmake_sanitize

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:20.04
  environment:
    CC: gcc
    CXX: g++
  commands:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get update -y
    - apt-get install -y make $CC g++ perl cmake
    - $CC --version
    - mkdir build && cd build
    - cmake $CMAKE_FLAGS ..  -DROARING_SANITIZE=ON
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest .  --output-on-failure
